/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_CSEval(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_CSEval(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_CSEval(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "CppHeader.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_Variable(void * jarg1) {
  void * jresult ;
  std::wstring arg1 ;
  std::wstring *argp1 ;
  Variable *result = 0 ;
  
  argp1 = (std::wstring *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (Variable *)new Variable(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Variable_m_name_set(void * jarg1, void * jarg2) {
  Variable *arg1 = (Variable *) 0 ;
  std::wstring arg2 ;
  std::wstring *argp2 ;
  
  arg1 = (Variable *)jarg1; 
  argp2 = (std::wstring *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Variable_m_name_get(void * jarg1) {
  void * jresult ;
  Variable *arg1 = (Variable *) 0 ;
  std::wstring result;
  
  arg1 = (Variable *)jarg1; 
  result =  ((arg1)->m_name);
  jresult = new std::wstring((const std::wstring &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Variable(void * jarg1) {
  Variable *arg1 = (Variable *) 0 ;
  
  arg1 = (Variable *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ValueBuffer() {
  void * jresult ;
  ValueBuffer *result = 0 ;
  
  result = (ValueBuffer *)new ValueBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ValueBuffer_m_type_set(void * jarg1, int jarg2) {
  ValueBuffer *arg1 = (ValueBuffer *) 0 ;
  enum BufferType arg2 ;
  
  arg1 = (ValueBuffer *)jarg1; 
  arg2 = (enum BufferType)jarg2; 
  if (arg1) (arg1)->m_type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ValueBuffer_m_type_get(void * jarg1) {
  int jresult ;
  ValueBuffer *arg1 = (ValueBuffer *) 0 ;
  enum BufferType result;
  
  arg1 = (ValueBuffer *)jarg1; 
  result = (enum BufferType) ((arg1)->m_type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ValueBuffer_m_buffer_set(void * jarg1, void * jarg2) {
  ValueBuffer *arg1 = (ValueBuffer *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ValueBuffer *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->m_buffer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ValueBuffer_m_buffer_get(void * jarg1) {
  void * jresult ;
  ValueBuffer *arg1 = (ValueBuffer *) 0 ;
  void *result = 0 ;
  
  arg1 = (ValueBuffer *)jarg1; 
  result = (void *) ((arg1)->m_buffer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ValueBuffer_m_indices_set(void * jarg1, void * jarg2) {
  ValueBuffer *arg1 = (ValueBuffer *) 0 ;
  std::vector< int > arg2 ;
  std::vector< int > *argp2 ;
  
  arg1 = (ValueBuffer *)jarg1; 
  argp2 = (std::vector< int > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< int >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_indices = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ValueBuffer_m_indices_get(void * jarg1) {
  void * jresult ;
  ValueBuffer *arg1 = (ValueBuffer *) 0 ;
  std::vector< int > result;
  
  arg1 = (ValueBuffer *)jarg1; 
  result =  ((arg1)->m_indices);
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ValueBuffer_m_colIndicies_set(void * jarg1, void * jarg2) {
  ValueBuffer *arg1 = (ValueBuffer *) 0 ;
  std::vector< int > arg2 ;
  std::vector< int > *argp2 ;
  
  arg1 = (ValueBuffer *)jarg1; 
  argp2 = (std::vector< int > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< int >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_colIndicies = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ValueBuffer_m_colIndicies_get(void * jarg1) {
  void * jresult ;
  ValueBuffer *arg1 = (ValueBuffer *) 0 ;
  std::vector< int > result;
  
  arg1 = (ValueBuffer *)jarg1; 
  result =  ((arg1)->m_colIndicies);
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ValueBuffer(void * jarg1) {
  ValueBuffer *arg1 = (ValueBuffer *) 0 ;
  
  arg1 = (ValueBuffer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IEvalModel_LoadModel(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  IEvalModel *arg1 = (IEvalModel *) 0 ;
  DataType arg2 ;
  std::wstring *arg3 = 0 ;
  DeviceDescriptor *arg4 = 0 ;
  DeviceDescriptor temp4 ;
  
  arg1 = (IEvalModel *)jarg1; 
  arg2 = (DataType)jarg2; 
  arg3 = (std::wstring *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
    return ;
  } 
  temp4 = (DeviceDescriptor)jarg4; 
  arg4 = &temp4; 
  (arg1)->LoadModel(arg2,(std::wstring const &)*arg3,(DeviceDescriptor const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IEvalModel_GetVariableByName(void * jarg1, void * jarg2) {
  void * jresult ;
  IEvalModel *arg1 = (IEvalModel *) 0 ;
  std::wstring arg2 ;
  std::wstring *argp2 ;
  SwigValueWrapper< Variable > result;
  
  arg1 = (IEvalModel *)jarg1; 
  argp2 = (std::wstring *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetVariableByName(arg2);
  jresult = new Variable((const Variable &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IEvalModel_GetModelOutputs(void * jarg1, void * jarg2) {
  IEvalModel *arg1 = (IEvalModel *) 0 ;
  std::vector< Variable > *arg2 = 0 ;
  
  arg1 = (IEvalModel *)jarg1; 
  arg2 = (std::vector< Variable > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Variable > & type is null", 0);
    return ;
  } 
  (arg1)->GetModelOutputs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IEvalModel_GetModelInputs(void * jarg1, void * jarg2, void * jarg3) {
  IEvalModel *arg1 = (IEvalModel *) 0 ;
  std::vector< Variable > *arg2 = 0 ;
  std::vector< Variable > *arg3 = 0 ;
  
  arg1 = (IEvalModel *)jarg1; 
  arg2 = (std::vector< Variable > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Variable > & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< Variable > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Variable > & type is null", 0);
    return ;
  } 
  (arg1)->GetModelInputs(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IEvalModel_Evaluate__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  IEvalModel *arg1 = (IEvalModel *) 0 ;
  std::unordered_map< std::wstring,ValueBuffer * > *arg2 = 0 ;
  std::unordered_map< std::wstring,ValueBuffer * > *arg3 = 0 ;
  
  arg1 = (IEvalModel *)jarg1; 
  arg2 = (std::unordered_map< std::wstring,ValueBuffer * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< std::wstring,ValueBuffer * > & type is null", 0);
    return ;
  } 
  arg3 = (std::unordered_map< std::wstring,ValueBuffer * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< std::wstring,ValueBuffer * > & type is null", 0);
    return ;
  } 
  (arg1)->Evaluate(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IEvalModel_Evaluate__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  IEvalModel *arg1 = (IEvalModel *) 0 ;
  std::unordered_map< std::wstring,SequenceOfValueBuffer * > *arg2 = 0 ;
  std::unordered_map< std::wstring,SequenceOfValueBuffer * > *arg3 = 0 ;
  
  arg1 = (IEvalModel *)jarg1; 
  arg2 = (std::unordered_map< std::wstring,SequenceOfValueBuffer * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< std::wstring,SequenceOfValueBuffer * > & type is null", 0);
    return ;
  } 
  arg3 = (std::unordered_map< std::wstring,SequenceOfValueBuffer * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< std::wstring,SequenceOfValueBuffer * > & type is null", 0);
    return ;
  } 
  (arg1)->Evaluate(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IEvalModel_Evaluate__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  IEvalModel *arg1 = (IEvalModel *) 0 ;
  std::unordered_map< std::wstring,BatchOfSequenceOfValueBuffer * > *arg2 = 0 ;
  std::unordered_map< std::wstring,BatchOfSequenceOfValueBuffer * > *arg3 = 0 ;
  
  arg1 = (IEvalModel *)jarg1; 
  arg2 = (std::unordered_map< std::wstring,BatchOfSequenceOfValueBuffer * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< std::wstring,BatchOfSequenceOfValueBuffer * > & type is null", 0);
    return ;
  } 
  arg3 = (std::unordered_map< std::wstring,BatchOfSequenceOfValueBuffer * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< std::wstring,BatchOfSequenceOfValueBuffer * > & type is null", 0);
    return ;
  } 
  (arg1)->Evaluate(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IEvalModel(void * jarg1) {
  IEvalModel *arg1 = (IEvalModel *) 0 ;
  
  arg1 = (IEvalModel *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Eval_LoadModel(void * jarg1, int jarg2, void * jarg3, int jarg4) {
  Eval *arg1 = (Eval *) 0 ;
  DataType arg2 ;
  std::wstring *arg3 = 0 ;
  DeviceDescriptor *arg4 = 0 ;
  DeviceDescriptor temp4 ;
  
  arg1 = (Eval *)jarg1; 
  arg2 = (DataType)jarg2; 
  arg3 = (std::wstring *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::wstring const & type is null", 0);
    return ;
  } 
  temp4 = (DeviceDescriptor)jarg4; 
  arg4 = &temp4; 
  (arg1)->LoadModel(arg2,(std::wstring const &)*arg3,(DeviceDescriptor const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Eval_GetVariableByName(void * jarg1, void * jarg2) {
  void * jresult ;
  Eval *arg1 = (Eval *) 0 ;
  std::wstring arg2 ;
  std::wstring *argp2 ;
  SwigValueWrapper< Variable > result;
  
  arg1 = (Eval *)jarg1; 
  argp2 = (std::wstring *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::wstring", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetVariableByName(arg2);
  jresult = new Variable((const Variable &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Eval_GetModelOutputs(void * jarg1, void * jarg2) {
  Eval *arg1 = (Eval *) 0 ;
  std::vector< Variable > *arg2 = 0 ;
  
  arg1 = (Eval *)jarg1; 
  arg2 = (std::vector< Variable > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Variable > & type is null", 0);
    return ;
  } 
  (arg1)->GetModelOutputs(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Eval_GetModelInputs(void * jarg1, void * jarg2, void * jarg3) {
  Eval *arg1 = (Eval *) 0 ;
  std::vector< Variable > *arg2 = 0 ;
  std::vector< Variable > *arg3 = 0 ;
  
  arg1 = (Eval *)jarg1; 
  arg2 = (std::vector< Variable > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Variable > & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< Variable > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Variable > & type is null", 0);
    return ;
  } 
  (arg1)->GetModelInputs(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Eval_Evaluate__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  Eval *arg1 = (Eval *) 0 ;
  std::unordered_map< std::wstring,ValueBuffer * > *arg2 = 0 ;
  std::unordered_map< std::wstring,ValueBuffer * > *arg3 = 0 ;
  
  arg1 = (Eval *)jarg1; 
  arg2 = (std::unordered_map< std::wstring,ValueBuffer * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< std::wstring,ValueBuffer * > & type is null", 0);
    return ;
  } 
  arg3 = (std::unordered_map< std::wstring,ValueBuffer * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< std::wstring,ValueBuffer * > & type is null", 0);
    return ;
  } 
  (arg1)->Evaluate(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Eval_Evaluate__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  Eval *arg1 = (Eval *) 0 ;
  std::unordered_map< std::wstring,SequenceOfValueBuffer * > *arg2 = 0 ;
  std::unordered_map< std::wstring,SequenceOfValueBuffer * > *arg3 = 0 ;
  
  arg1 = (Eval *)jarg1; 
  arg2 = (std::unordered_map< std::wstring,SequenceOfValueBuffer * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< std::wstring,SequenceOfValueBuffer * > & type is null", 0);
    return ;
  } 
  arg3 = (std::unordered_map< std::wstring,SequenceOfValueBuffer * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< std::wstring,SequenceOfValueBuffer * > & type is null", 0);
    return ;
  } 
  (arg1)->Evaluate(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Eval_Evaluate__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  Eval *arg1 = (Eval *) 0 ;
  std::unordered_map< std::wstring,BatchOfSequenceOfValueBuffer * > *arg2 = 0 ;
  std::unordered_map< std::wstring,BatchOfSequenceOfValueBuffer * > *arg3 = 0 ;
  
  arg1 = (Eval *)jarg1; 
  arg2 = (std::unordered_map< std::wstring,BatchOfSequenceOfValueBuffer * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< std::wstring,BatchOfSequenceOfValueBuffer * > & type is null", 0);
    return ;
  } 
  arg3 = (std::unordered_map< std::wstring,BatchOfSequenceOfValueBuffer * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::unordered_map< std::wstring,BatchOfSequenceOfValueBuffer * > & type is null", 0);
    return ;
  } 
  (arg1)->Evaluate(*arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Eval() {
  void * jresult ;
  Eval *result = 0 ;
  
  result = (Eval *)new Eval();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Eval(void * jarg1) {
  Eval *arg1 = (Eval *) 0 ;
  
  arg1 = (Eval *)jarg1; 
  delete arg1;
}


SWIGEXPORT IEvalModel * SWIGSTDCALL CSharp_Eval_SWIGUpcast(Eval *jarg1) {
    return (IEvalModel *)jarg1;
}

#ifdef __cplusplus
}
#endif

