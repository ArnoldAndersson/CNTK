//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IEvalModel : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IEvalModel(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IEvalModel obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IEvalModel() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CSEvalPINVOKE.delete_IEvalModel(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void LoadModel(DataType dataType, SWIGTYPE_p_std__wstring modelFile, DeviceDescriptor computeDevice) {
    CSEvalPINVOKE.IEvalModel_LoadModel(swigCPtr, (int)dataType, SWIGTYPE_p_std__wstring.getCPtr(modelFile), (int)computeDevice);
    if (CSEvalPINVOKE.SWIGPendingException.Pending) throw CSEvalPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Variable GetVariableByName(SWIGTYPE_p_std__wstring name) {
    Variable ret = new Variable(CSEvalPINVOKE.IEvalModel_GetVariableByName(swigCPtr, SWIGTYPE_p_std__wstring.getCPtr(name)), true);
    if (CSEvalPINVOKE.SWIGPendingException.Pending) throw CSEvalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void GetModelOutputs(SWIGTYPE_p_std__vectorT_Variable_t outputVariables) {
    CSEvalPINVOKE.IEvalModel_GetModelOutputs(swigCPtr, SWIGTYPE_p_std__vectorT_Variable_t.getCPtr(outputVariables));
    if (CSEvalPINVOKE.SWIGPendingException.Pending) throw CSEvalPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void GetModelInputs(SWIGTYPE_p_std__vectorT_Variable_t inputVariables, SWIGTYPE_p_std__vectorT_Variable_t outputVariables) {
    CSEvalPINVOKE.IEvalModel_GetModelInputs(swigCPtr, SWIGTYPE_p_std__vectorT_Variable_t.getCPtr(inputVariables), SWIGTYPE_p_std__vectorT_Variable_t.getCPtr(outputVariables));
    if (CSEvalPINVOKE.SWIGPendingException.Pending) throw CSEvalPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Evaluate(SWIGTYPE_p_std__unordered_mapT_std__wstring_ValueBuffer_p_t inputs, SWIGTYPE_p_std__unordered_mapT_std__wstring_ValueBuffer_p_t outputs) {
    CSEvalPINVOKE.IEvalModel_Evaluate__SWIG_0(swigCPtr, SWIGTYPE_p_std__unordered_mapT_std__wstring_ValueBuffer_p_t.getCPtr(inputs), SWIGTYPE_p_std__unordered_mapT_std__wstring_ValueBuffer_p_t.getCPtr(outputs));
    if (CSEvalPINVOKE.SWIGPendingException.Pending) throw CSEvalPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Evaluate(SWIGTYPE_p_std__unordered_mapT_std__wstring_SequenceOfValueBuffer_p_t inputs, SWIGTYPE_p_std__unordered_mapT_std__wstring_SequenceOfValueBuffer_p_t outputs) {
    CSEvalPINVOKE.IEvalModel_Evaluate__SWIG_1(swigCPtr, SWIGTYPE_p_std__unordered_mapT_std__wstring_SequenceOfValueBuffer_p_t.getCPtr(inputs), SWIGTYPE_p_std__unordered_mapT_std__wstring_SequenceOfValueBuffer_p_t.getCPtr(outputs));
    if (CSEvalPINVOKE.SWIGPendingException.Pending) throw CSEvalPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Evaluate(SWIGTYPE_p_std__unordered_mapT_std__wstring_BatchOfSequenceOfValueBuffer_p_t inputs, SWIGTYPE_p_std__unordered_mapT_std__wstring_BatchOfSequenceOfValueBuffer_p_t outputs) {
    CSEvalPINVOKE.IEvalModel_Evaluate__SWIG_2(swigCPtr, SWIGTYPE_p_std__unordered_mapT_std__wstring_BatchOfSequenceOfValueBuffer_p_t.getCPtr(inputs), SWIGTYPE_p_std__unordered_mapT_std__wstring_BatchOfSequenceOfValueBuffer_p_t.getCPtr(outputs));
    if (CSEvalPINVOKE.SWIGPendingException.Pending) throw CSEvalPINVOKE.SWIGPendingException.Retrieve();
  }

}
